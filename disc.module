<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function disc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//  drupal_set_message($form_id);
//  kint($form['actions']);

  switch ($form_id) {
    case 'node_article_form':
    case 'node_article_edit_form':
      //$form['actions']['publish']['#submit'][] = 'disc_form_submit';
      break;
    case 'user_login_form':
      //$form['actions']['submit']['#submit'][] = 'disc_form_submit';
      break;
  }

}

function disc_form_submit($form, FormStateInterface $form_state) {
  //$values = $form_state->getValues();
}

function disc_switch_db($drupalVersion = 6) {
  if ($drupalVersion == 6) { \Drupal\Core\Database\Database::setActiveConnection('external'); }
  else { \Drupal\Core\Database\Database::setActiveConnection(); }
}

function d6_user_load($uid) {
  disc_switch_db(6);
  $query = db_select('users', 'u')
    ->fields('u')
    ->condition('u.uid', $uid)
    ->execute();
  disc_switch_db(8);
  $user = $query->fetchAssoc();
  d6_user_load_extras($user);
  //dpm($node);
  return $user;
}

function d6_user_load_extras(&$user) {
  unset($user['pass']);
  // Unserialize their data and load their profile node.
  $user['data'] = isset($user['data']) ? unserialize($user['data']) : NULL;
  disc_switch_db(6);
  $query = db_select('node', 'n')
    ->fields('n')
    ->condition('n.uid', $user['uid'])
    ->condition('n.type', 'profile')
    ->execute();
  disc_switch_db(8);
  $user['profile'] = $query->fetchAssoc();
  d6_node_load_extras($user['profile']);

  // Convert the D6 content type data to D8.
  $user['field_scores_posted'] = array(array('value' => $user['profile']['profile']['field_dg_profile_scores_posted_value']));
  $user['field_rounds_per_month'] = array(array('value' => $user['profile']['profile']['field_dg_profile_rounds_per_m_value']));
  $user['field_average_out'] = array(array('value' => $user['profile']['profile']['field_dg_profile_average_out_value']));
  $user['field_ace_count'] = array(array('value' => $user['profile']['profile']['field_dg_profile_ace_count_value']));
  $user['field_holes_scored'] = array(array('value' => $user['profile']['profile']['field_dg_profile_holes_scored_value']));
  $user['field_holes_per_month'] = array(array('value' => $user['profile']['profile']['field_dg_profile_holes_per_month_value']));
  $user['field_courses_played'] = array(array('value' => $user['profile']['profile']['field_dg_profile_cls_played_value']));
}

function d6_user_to_d8($user) {

  // Set aside its D6 user id.
  $user['field_d6_uid'] = array(array('value' => $user['uid']));
  unset($user['uid']);

  // Remove any protected vars.
  $remove = array('pass', 'mode', 'sort', 'translate', 'threshold', 'theme', 'signature', 'signature_format', 'language', 'init');
  foreach($remove as $prop) { if(isset($user[$prop])) { unset($user[$prop]); } }

  // Convert the D6 location to a D8 address.
  if (isset($user['profile']['profile']['location'])) {
    $location = $user['profile']['profile']['location'];
    $country = strtoupper($location['country']);
    $province = strtoupper($location['province']);
    $user["field_address"] = array(array(
      "langcode" => null,
      "country_code" => $country,
      "administrative_area" => "{$country}-{$province}",
      "locality" => $location['city'],
      "dependent_locality" => null,
      "postal_code" => $location['postal_code'],
      "sorting_code" => null,
      "address_line1" => $location['street'],
      "address_line2" => $location['additional'],
      "organization" => "",
      "recipient" => ""
    ));
  }

  //dpm($user);
  return \Drupal\user\Entity\User::create($user);
}

function d6_node_load($nid, $type) {
  //drupal_set_message(t('Loading %nid (%type)', array('%nid' => $nid, '%type' => $type)));
  disc_switch_db(6);
  $query = db_select('node', 'n')
    ->fields('n')
    ->condition('n.nid', $nid)
    ->execute();
  disc_switch_db(8);
  $node = $query->fetchAssoc();
  d6_node_load_extras($node);
  //dpm($node);
  return $node;
}

function d6_node_load_extras(&$node) {
  switch ($node['type']) {

    // Courses.
    case 'dg_course':

      // Grab the course's course location node id.
      disc_switch_db(6);
      $query = db_select('content_type_dg_course', 'ct')
        ->fields('ct', array('field_dg_course_location_nid'))
        ->condition('ct.nid', $node['nid'])
        ->condition('ct.vid', $node['vid'])
        ->execute();
      disc_switch_db(8);
      $contentType = $query->fetchAssoc();
      $courseLocationNid = $contentType['field_dg_course_location_nid'];

      // Load the course location node.
      $courseLocation = d6_node_load($courseLocationNid, 'dg_course_location');
      $node['field_course_location_nid'] = $courseLocationNid;
      $node['field_course_location_vid'] = $courseLocation['vid'];

      // Load the address information.
      disc_switch_db(6);
      $query = db_select('location_instance', 'li');
      $query->join('location', 'l', 'li.lid = l.lid');
      $query->fields('li', array('lid'))
        ->fields('l')
        ->condition('li.nid', $courseLocation['nid'])
        ->condition('li.vid', $courseLocation['vid']);
      $location = $query->execute()->fetchAssoc();
      disc_switch_db(8);

      // Convert the D6 location to a D8 address.
      $country = strtoupper($location['country']);
      $province = strtoupper($location['province']);

      $node["field_address"] = array(array(
        "langcode" => null,
        "country_code" => $country,
        "administrative_area" => "{$country}-{$province}",
        "locality" => $location['city'],
        "dependent_locality" => null,
        "postal_code" => $location['postal_code'],
        "sorting_code" => null,
        "address_line1" => $location['street'],
        "address_line2" => $location['additional'],
        "organization" => "",
        "recipient" => ""
      ));

      break;

    // Holes.
    case 'dg_hole':

      // Grab the content type field data.
      disc_switch_db(6);
      $query = db_select('content_type_dg_hole', 'ct')
        ->fields('ct', array(
          'field_dg_hole_course_nid',
          'field_dg_hole_name_value',
          'field_dg_hole_tee_value',
          'field_dg_hole_par_value',
          'field_dg_hole_distance_value'
        ))
        ->condition('ct.nid', $node['nid'])
        ->condition('ct.vid', $node['vid'])
        ->execute();
      disc_switch_db(8);
      $hole = $query->fetchAssoc();

      // Convert the D6 content type data to D8.
      $node['field_name'] = array(array('value' => $hole['field_dg_hole_name_value']));
      $node['field_par'] = array(array('value' => $hole['field_dg_hole_par_value']));
      $node['field_distance'] = array(array('value' => $hole['field_dg_hole_distance_value']));
      $node['field_course'] = array(array('target_id' => d8_nid_from_d6_nid($hole['field_dg_hole_course_nid'])));
      $node['field_tee'] = array(array('target_id' => $hole['field_dg_hole_tee_value']));

      break;

    // Layouts.
    case 'dg_layout':

      // Grab the content type field data.
      disc_switch_db(6);
      $query = db_select('content_type_dg_layout', 'ct')
        ->fields('ct', array(
          'field_dg_layout_course_nid',
          'field_dg_layout_hole_config_value'
        ))
        ->condition('ct.nid', $node['nid'])
        ->condition('ct.vid', $node['vid'])
        ->execute();
      disc_switch_db(8);
      $layout = $query->fetchAssoc();

      // Convert the D6 content type data to D8.
      $node['field_course'] = array(array('target_id' => d8_nid_from_d6_nid($layout['field_dg_layout_course_nid'])));
      $node['field_dg_layout_hole_config_value'] = $layout['field_dg_layout_hole_config_value'];

      break;

    // Profiles.
    case 'profile':

      // Grab the content type field data.
      disc_switch_db(6);
      $query = db_select('content_type_profile', 'ct')
        ->fields('ct')
        ->condition('ct.nid', $node['nid'])
        ->condition('ct.vid', $node['vid'])
        ->execute();
      disc_switch_db(8);
      $node['profile'] = $query->fetchAssoc();

      // Load the profile picture, if any.
      $fid = isset($node['profile']['field_dg_profile_picture_fid']) ?
        $node['profile']['field_dg_profile_picture_fid'] : NULL;
      if (!empty($fid)) {
        disc_switch_db(6);
        $query = db_select('files', 'f')
          ->fields('f')
          ->condition('f.fid', $fid)
          ->execute();
        $node['profile']['picture'] = $query->fetchAssoc();
        disc_switch_db(8);
      }

      // Load the address information.
      disc_switch_db(6);
      $query = db_select('location_instance', 'li');
      $query->join('location', 'l', 'li.lid = l.lid');
      $query->fields('li', array('lid'))
        ->fields('l')
        ->condition('li.lid', $node['profile']['field_dg_profile_location_lid'])
        ->condition('li.nid', $node['profile']['nid'])
        ->condition('li.vid', $node['profile']['vid']);
      $node['profile']['location'] = $query->execute()->fetchAssoc();
      disc_switch_db(8);

      break;

  }
}

function d6_node_to_d8($node) {
  
  // Convert the node type and set aside its D6 node id.
  $node['type'] = d6_content_type_to_d8($node['type']);
  $node['field_d6_nid'] = array(array('value' => $node['nid']));
  unset($node['nid']);

  // Remove any protected vars.
  $remove = array('vid', 'language', 'tnid', 'translate');
  foreach($remove as $prop) { if(isset($node[$prop])) { unset($node[$prop]); } }
  
  //dpm($node);
  return \Drupal\node\Entity\Node::create($node);
}

function d6_content_type_to_d8($type) {
  $map = array(
    'dg_course' => 'course',
    'dg_hole' => 'hole',
    'dg_layout' => 'layout',
    'dg_score' => 'score'
  );
  return isset($map[$type]) ? $map[$type] : NULL;
}

function d8_nid_from_d6_nid($nid) {
  $query = db_select('node__field_d6_nid', 'n')
    ->fields('n', array('entity_id'))
    ->condition('n.field_d6_nid_value', $nid)
    ->execute();
  $result = $query->fetchAssoc();
  return $result['entity_id'];
}

/**
 * Given a Drupal 6 course node id, this will return an associative arrays of
 * all the Drupal 6 hole node ids associated with the course.
 * @param $nid
 */
function d6_course_holes($nid) {
  disc_switch_db(6);
  $query = db_select('content_type_dg_hole', 'ct')
    ->fields('ct', array('nid'))
    ->condition('ct.field_dg_hole_course_nid', $nid)
    ->orderBy('ct.nid', 'ASC')
    ->groupBy('ct.nid')
    ->execute();
  disc_switch_db(8);
  return array_keys($query->fetchAllAssoc('nid'));
}

/**
 * Given a Drupal 6 course node id, this will return an associative arrays of
 * all the Drupal 6 layout node ids associated with the course.
 * @param $nid
 */
function d6_course_layouts($nid) {
  disc_switch_db(6);
  $query = db_select('content_type_dg_layout', 'ct')
    ->fields('ct', array('nid'))
    ->condition('ct.field_dg_layout_course_nid', $nid)
    ->orderBy('ct.nid', 'ASC')
    ->groupBy('ct.nid')
    ->execute();
  disc_switch_db(8);
  return array_keys($query->fetchAllAssoc('nid'));
}

function d6_course_location_images($nid, $vid) {
  disc_switch_db(6);
  $query = db_select('content_field_dg_course_location_images', 'cf');
  $query->join('files', 'f', 'cf.field_dg_course_location_images_fid = f.fid');
  $query->fields('cf', array(
    'field_dg_course_location_images_fid',
    'field_dg_course_location_images_data'
    )
  )->fields('f')
    ->condition('cf.field_dg_course_location_images_fid', 'NULL', '<>')
    ->condition('cf.nid', $nid)
    ->condition('cf.vid', $vid)
    ->orderBy('cf.delta', 'ASC');
  $results = $query->execute()->fetchAll();
  disc_switch_db(8);
  $images = array();
  if (!empty($results)) {
    foreach ($results as $result) {
      $images[$result->field_dg_course_location_images_fid] = $result;
      if (isset($result->field_dg_course_location_images_data)) {
        $result->field_dg_course_location_images_data = unserialize($result->field_dg_course_location_images_data);
      }
    }
  }
  return $images;
}

function d6_hole_images($nid, $vid) {
  disc_switch_db(6);
  $query = db_select('content_field_dg_hole_images', 'cf');
  $query->join('files', 'f', 'cf.field_dg_hole_images_fid = f.fid');
  $query->fields('cf', array(
      'field_dg_hole_images_fid',
      'field_dg_hole_images_data'
    )
  )->fields('f')
    ->condition('cf.field_dg_hole_images_fid', 'NULL', '<>')
    ->condition('cf.nid', $nid)
    ->condition('cf.vid', $vid)
    ->orderBy('cf.delta', 'ASC');
  $results = $query->execute()->fetchAll();
  disc_switch_db(8);
  $images = array();
  if (!empty($results)) {
    foreach ($results as $result) {
      $images[$result->field_dg_hole_images_fid] = $result;
      if (isset($result->field_dg_hole_images_data)) {
        $result->field_dg_hole_images_data = unserialize($result->field_dg_hole_images_data);
      }
    }
  }
  return $images;
}
